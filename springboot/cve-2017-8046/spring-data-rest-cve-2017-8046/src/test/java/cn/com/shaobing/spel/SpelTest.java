package cn.com.shaobing.spel;

import org.junit.Test;
import org.springframework.expression.EvaluationContext;
import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.SpelParserConfiguration;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;

import java.io.IOException;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;

import static org.junit.Assert.assertEquals;

/**
 * https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions
 * http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#expressions-example-classes
 *
 * http://www.cnblogs.com/larryzeal/p/5964621.html
 *
 * @author pez1420@gmail.com
 * @version $Id: SpelTest.java v 0.1 2017/9/30 15:50 luyb Exp $$
 */
public class SpelTest {

    @Test
    public void testSpelliteral() {
        //字面量
        ExpressionParser parser = new SpelExpressionParser();
        Expression exp = parser.parseExpression("'Hello World'");
        String message = (String) exp.getValue();

        assertEquals(message, "Hello World");

    }

    @Test
    public void testSpelMethod() {
        //方法调用
        ExpressionParser parser = new SpelExpressionParser();
        Expression exp = parser.parseExpression("'Hello World'.concat('!')");
        String message = (String) exp.getValue();

        assertEquals(message, "Hello World!");

        //调用getBytes()方法
        exp = parser.parseExpression("'Hello World'.bytes");
        byte[] bytes = (byte[]) exp.getValue();

        //调用 String’s constructor
        parser = new SpelExpressionParser();
        exp = parser.parseExpression("new String('hello world').toUpperCase()");
        message = exp.getValue(String.class);

    }

    @Test
    public void testContext() {
        GregorianCalendar c = new GregorianCalendar();
        c.set(1856, 7, 9);

        // The constructor arguments are name, birthday, and nationality.
        Inventor tesla = new Inventor("Nikola Tesla", c.getTime(), "Serbian");

        ExpressionParser parser = new SpelExpressionParser();
        Expression exp = parser.parseExpression("name");

        EvaluationContext context = new StandardEvaluationContext(tesla);
        String name = (String) exp.getValue(context);

        System.out.println(name);
    }

    @Test
    public void testContextDirect() {
        GregorianCalendar c = new GregorianCalendar();
        c.set(1856, 7, 9);

        // The constructor arguments are name, birthday, and nationality.
        Inventor tesla = new Inventor("Nikola Tesla", c.getTime(), "Serbian");

        ExpressionParser parser = new SpelExpressionParser();
        Expression exp = parser.parseExpression("name");
        String name = (String) exp.getValue(tesla);

        System.out.println(name);
    }

    @Test
    public void testBooleanOperator() {

        GregorianCalendar c = new GregorianCalendar();
        c.set(1856, 7, 9);

        // The constructor arguments are name, birthday, and nationality.
        Inventor tesla = new Inventor("Nikola Tesla", c.getTime(), "Serbian");

        ExpressionParser parser = new SpelExpressionParser();

        Expression exp = parser.parseExpression("name == 'Nikola Tesla'");
        EvaluationContext context = new StandardEvaluationContext(tesla);

        boolean result = exp.getValue(context, Boolean.class); //
        System.out.println(result);
    }

    @Test
    public void testEvaluationContext() {

        class Simple {
            public List<Boolean> booleanList = new ArrayList<Boolean>();
        }

        Simple simple = new Simple();

        simple.booleanList.add(true);

        StandardEvaluationContext simpleContext = new StandardEvaluationContext(simple);

        ExpressionParser parser = new SpelExpressionParser();

// false is passed in here as a string. SpEL and the conversion service will
// correctly recognize that it needs to be a Boolean and convert it
        parser.parseExpression("booleanList[0]").setValue(simpleContext, "false");

// b will be false
        Boolean b = simple.booleanList.get(0);

        System.out.println(b);

    }

    @Test
    public void testParserconfiguration() {
        // automatically grow the array or list to accommodate that index.
        class Demo {
            public List<String> list;
        }

// Turn on:
// - auto null reference initialization
// - auto collection growing
        SpelParserConfiguration config = new SpelParserConfiguration(true,true);

        ExpressionParser parser = new SpelExpressionParser(config);

        Expression expression = parser.parseExpression("list[3]");

        Demo demo = new Demo();

        Object o = expression.getValue(demo);

        System.out.println(o);
    }

    //T操作符可以指定java.lang.Class的实例，可以通过T操作符调用静态方法
    //使用该操作符引用java.lang下的类型时，可以省略包路径。但其他引用不能省略！
    @Test
    public void testRuntime() throws IOException {
        //Runtime.getRuntime().exec("calc.exe");
        ExpressionParser parser = new SpelExpressionParser();
        Expression exp = parser.parseExpression("T(java.lang.Runtime).getRuntime().exec('calc.exe')");
        System.out.println(exp.getValue());

        exp = parser.parseExpression("T(java.lang.Runtime).getRuntime().exec('calc.exe').firstName");
        exp.setValue("", "");
    }

}
